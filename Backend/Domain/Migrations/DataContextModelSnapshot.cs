// <auto-generated />
using System;
using Domain.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Domain.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Domain.ChatRow", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("msg_id")
                        .HasColumnType("int");

                    b.Property<int>("Alive")
                        .HasColumnName("alive")
                        .HasColumnType("int");

                    b.Property<string>("Ip")
                        .HasColumnName("ip")
                        .HasColumnType("text");

                    b.Property<string>("Message")
                        .HasColumnName("message")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.Property<int>("ServerId")
                        .HasColumnName("server_id")
                        .HasColumnType("int");

                    b.Property<string>("SteamAuth2")
                        .HasColumnName("auth")
                        .HasColumnType("text");

                    b.Property<int>("Team")
                        .HasColumnName("team")
                        .HasColumnType("int");

                    b.Property<int>("Timestamp")
                        .HasColumnName("timestamp")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasColumnName("type")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("chatlog");
                });

            modelBuilder.Entity("Domain.Entities.Account.Feature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("TypePrivilegeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TypePrivilegeId");

                    b.ToTable("Feature");
                });

            modelBuilder.Entity("Domain.Entities.Account.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "User"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Owner"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Account.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Auth64Id")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("LastChanged")
                        .HasColumnType("datetime");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("State")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Domain.Entities.News.News", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("ImageSource")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("Published")
                        .HasColumnType("datetime");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<int>("UserCreatorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserCreatorId");

                    b.ToTable("News");
                });

            modelBuilder.Entity("Domain.Entities.Privilege.Privilege", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AuthId32")
                        .HasColumnName("account_id")
                        .HasColumnType("int");

                    b.Property<int>("Expires")
                        .HasColumnName("expires")
                        .HasColumnType("int");

                    b.Property<string>("GroupName")
                        .HasColumnName("group")
                        .HasColumnType("text");

                    b.Property<int>("LastVisit")
                        .HasColumnName("lastvisit")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.Property<int>("ServerId")
                        .HasColumnName("sid")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("vip_users");
                });

            modelBuilder.Entity("Domain.Entities.Product.TypePrivilege", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("DiscountId")
                        .HasColumnType("int");

                    b.Property<string>("GroupName")
                        .HasColumnType("text");

                    b.Property<string>("ImageSource")
                        .HasColumnType("text");

                    b.Property<int>("Lvl")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<bool>("Sale")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("DiscountId");

                    b.ToTable("TypePrivileges");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            GroupName = "vip",
                            ImageSource = "/images/privilege/vip.jpg",
                            Lvl = 0,
                            Name = "VIP",
                            Price = 150m,
                            Sale = false
                        },
                        new
                        {
                            Id = 2,
                            GroupName = "VipPlus",
                            ImageSource = "/images/privilege/vipplus.jpg",
                            Lvl = 0,
                            Name = "VIP PLUS",
                            Price = 300m,
                            Sale = false
                        },
                        new
                        {
                            Id = 3,
                            GroupName = "Admin",
                            ImageSource = "/images/privilege/admin.jpg",
                            Lvl = 1,
                            Name = "Администратор",
                            Price = 300m,
                            Sale = false
                        },
                        new
                        {
                            Id = 4,
                            GroupName = "GL.admin",
                            ImageSource = "/images/privilege/gladmin.jpg",
                            Lvl = 2,
                            Name = "Гл.Админ",
                            Price = 500m,
                            Sale = false
                        },
                        new
                        {
                            Id = 5,
                            GroupName = "GL.admin PLUS",
                            ImageSource = "/images/privilege/gladminplus.jpg",
                            Lvl = 3,
                            Name = "Гл.Админ PLUS",
                            Price = 700m,
                            Sale = false
                        });
                });

            modelBuilder.Entity("Domain.Entities.Purchase.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("BillId")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<int>("PrivilegeId")
                        .HasColumnType("int")
                        .HasMaxLength(11);

                    b.Property<int>("TypePrivilegeId")
                        .HasColumnType("int");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("Id");

                    b.HasIndex("PrivilegeId");

                    b.HasIndex("TypePrivilegeId");

                    b.ToTable("Payment");
                });

            modelBuilder.Entity("Domain.Entities.Rank.Rank", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ImageSource")
                        .HasColumnType("text");

                    b.Property<int>("Lvl")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Rank");
                });

            modelBuilder.Entity("Domain.Entities.Server.Server", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasColumnType("nvarchar(15)");

                    b.Property<int>("Port")
                        .HasColumnType("int(5)");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<string>("Token")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ServerInfo");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Ip = "109.248.250.68",
                            Port = 27015,
                            State = 0
                        },
                        new
                        {
                            Id = 2,
                            Ip = "37.18.21.245",
                            Port = 27155,
                            State = 0
                        },
                        new
                        {
                            Id = 3,
                            Ip = "37.18.21.245",
                            Port = 27443,
                            State = 0
                        },
                        new
                        {
                            Id = 4,
                            Ip = "109.237.109.233",
                            Port = 27020,
                            State = 0
                        });
                });

            modelBuilder.Entity("Domain.Entities.Support.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AccusedUserStatId")
                        .HasColumnType("int");

                    b.Property<string>("Answer")
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("CheckingUserId")
                        .HasColumnType("int");

                    b.Property<int?>("CheckingUserStatId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateAnswer")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DateCreation")
                        .HasColumnType("datetime");

                    b.Property<string>("ReportMessage")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("SenderUserStatId")
                        .HasColumnType("int");

                    b.Property<int>("ServerId")
                        .HasColumnType("int");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccusedUserStatId");

                    b.HasIndex("CheckingUserId");

                    b.HasIndex("CheckingUserStatId");

                    b.HasIndex("SenderUserStatId");

                    b.HasIndex("ServerId");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("Domain.Entities.UserStat.UserStat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasColumnType("int");

                    b.Property<int>("Assists")
                        .HasColumnName("assists")
                        .HasColumnType("int");

                    b.Property<int>("Deaths")
                        .HasColumnName("deaths")
                        .HasColumnType("int");

                    b.Property<int>("Headshots")
                        .HasColumnName("headshots")
                        .HasColumnType("int");

                    b.Property<int>("Hits")
                        .HasColumnName("hits")
                        .HasColumnType("int");

                    b.Property<int>("Kills")
                        .HasColumnName("kills")
                        .HasColumnType("int");

                    b.Property<long>("LastConnection")
                        .HasColumnName("lastconnect")
                        .HasColumnType("bigint");

                    b.Property<int>("Lvl")
                        .HasColumnName("rank")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.Property<long>("PlayTime")
                        .HasColumnName("playtime")
                        .HasColumnType("bigint");

                    b.Property<int>("RoundLosses")
                        .HasColumnName("round_lose")
                        .HasColumnType("int");

                    b.Property<int>("RoundWins")
                        .HasColumnName("round_win")
                        .HasColumnType("int");

                    b.Property<int>("Shoots")
                        .HasColumnName("shoots")
                        .HasColumnType("int");

                    b.Property<string>("SteamAuth2")
                        .HasColumnName("steam")
                        .HasColumnType("text");

                    b.Property<int>("Value")
                        .HasColumnName("value")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("lvl_base");
                });

            modelBuilder.Entity("Domain.Purchase.Discount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<double>("Percent")
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.ToTable("Discount");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Percent = 0.5
                        });
                });

            modelBuilder.Entity("Domain.Entities.Account.Feature", b =>
                {
                    b.HasOne("Domain.Entities.Product.TypePrivilege", "TypePrivilege")
                        .WithMany("Features")
                        .HasForeignKey("TypePrivilegeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Account.User", b =>
                {
                    b.HasOne("Domain.Entities.Account.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("Domain.Entities.Account.RefreshToken", "RefreshTokens", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            b1.Property<DateTime>("Created")
                                .HasColumnType("datetime");

                            b1.Property<DateTime>("Expires")
                                .HasColumnType("datetime");

                            b1.Property<DateTime?>("Revoked")
                                .HasColumnType("datetime");

                            b1.Property<int>("UserId")
                                .HasColumnType("int");

                            b1.Property<string>("Value")
                                .HasColumnType("text");

                            b1.HasKey("Id");

                            b1.HasIndex("UserId");

                            b1.ToTable("RefreshToken");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });
                });

            modelBuilder.Entity("Domain.Entities.News.News", b =>
                {
                    b.HasOne("Domain.Entities.Account.User", "UserCreator")
                        .WithMany()
                        .HasForeignKey("UserCreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Product.TypePrivilege", b =>
                {
                    b.HasOne("Domain.Purchase.Discount", "Discount")
                        .WithMany()
                        .HasForeignKey("DiscountId");
                });

            modelBuilder.Entity("Domain.Entities.Purchase.Payment", b =>
                {
                    b.HasOne("Domain.Entities.Privilege.Privilege", "Privilege")
                        .WithMany()
                        .HasForeignKey("PrivilegeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Product.TypePrivilege", "TypePrivilege")
                        .WithMany()
                        .HasForeignKey("TypePrivilegeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Support.Ticket", b =>
                {
                    b.HasOne("Domain.Entities.UserStat.UserStat", "AccusedUserStat")
                        .WithMany()
                        .HasForeignKey("AccusedUserStatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Account.User", "CheckingUser")
                        .WithMany()
                        .HasForeignKey("CheckingUserId");

                    b.HasOne("Domain.Entities.UserStat.UserStat", "CheckingUserStat")
                        .WithMany()
                        .HasForeignKey("CheckingUserStatId");

                    b.HasOne("Domain.Entities.UserStat.UserStat", "SenderUserStat")
                        .WithMany()
                        .HasForeignKey("SenderUserStatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Server.Server", "Server")
                        .WithMany()
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
